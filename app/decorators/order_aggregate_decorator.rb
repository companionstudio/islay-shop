class OrderAggregateDecorator < Draper::Base
  decorates :report

  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #
  #   Or, optionally enable "lazy helpers" by including this module:
  #     include Draper::LazyHelpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, attributes["created_at"].strftime("%a %m/%d/%y"),
  #                   :class => 'timestamp'
  #   end

  def total(value, money = true)
    this = report["this_#{value}"] || 0
    h.content_tag(:p, format(this, money), :class => "total")
  end

  def movement(value, money = true)
    this      = report["#{value}_movement"]
    previous  = report["previous_#{value}"]

    if this and previous
      h.content_tag(:p, "#{this.humanize} from #{format(previous, money)}", :class => "move-#{this}")
    end
  end

  def best(value, money = true)
    best        = report["best_#{value}"]
    best_month  = report["best_#{value}_month"]

    if best and best_month
      h.content_tag(:p, "Best: #{format(best, money)} for #{h.format_month(best_month)}", :class => 'best')
    end
  end

  def average(value, money = true)
    key = "average_#{value}"
    if report[key]
      h.content_tag(:p, "Average: #{format(report[key], money)}", :class => 'average')
    end
  end

  private

  def format(val, money)
    money ? h.format_money(val) : val
  end
end
