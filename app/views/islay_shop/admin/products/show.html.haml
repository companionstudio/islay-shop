- sub_header(link_to('Catalogue', path(:product_categories)))
- ancestor_category_links(@product)
- sub_header(@product.name)

- sub_header_status do

  %ul#summary
    %li
      %span.key Published
      - if @product.published?
        %span.value.indicator.ok Published
      - else
        %span.value.indicator unpublished

    %li
      %span.key Status
      - if @product.for_sale?
        %span.value.indicator.ok For Sale
      - elsif @product.discontinued?
        %span.value.indicator Discontinued
      - else
        %span.value.indicator Not for Sale

    %li
      %span.key Stock Level
      %span(class="value indicator #{@product.stock_warning? ? 'warning' : 'ok'}")
        = "Stock #{@product.stock_level_status.capitalize}"

= content do
  %div.overview
    = column(4, :class => 'asset-preview') do
      %div.frame
        - if @product.images.empty?
          %span(class='no-preview image') &nbsp;
        - else
          = image_tag(@product.images.first.previews.url(:thumb))

    = column(8, :class => 'product-description') do
      %ul.key-value
        %li.desc
          %span.key Description
          %div.value
            = simple_format(@product.description)

        - if @product.range
          %li
            %span.key Ranges
            %span.value= @product.range.name

        %li
          %span.key Manufacturer
          %div.value
            - if @product.manufacturer
              = @product.manufacturer.name
            - else
              \--

        %li
          %span.key Created at
          %div.value= creation_time(@product)

        %li
          %span.key Updated at
          %div.value= update_time(@product)

  = form_tag(path(:position, @product, :skus), :method => :put, :id => 'product-skus') do
    %h3.inset SKUs

    %ul
      %li= link_to('Stock Logs', path(@product, :stock_logs))
      %li= link_to('Price History', path(@product, :sku_price_points))

    %table.inset.sortable
      %thead
        %tr
          %th.select= check_box_tag('table_select_all', 1, nil, :class => 'toggle')
          %th.boolean Published
          %th.boolean Status
          %th SKU
          %th
          %th.number Stock
          %th.meta.indicator Delete

      %tbody
        - @product.skus.summary.each do |sku|
          %tr
            %td.select
              = check_box_tag('ids[]', sku.id, selected?(sku.id), :class => 'toggle')
            %td.boolean
              = boolean_indicator(sku.published?)
            %td.boolean
              = sku_sale_status(sku)
            %td
              %span.title= link_to(sku.short_desc, path(:edit, @product, sku), :class => 'edit')
            %td
              - sku.current_price_points.summary.each do |s|
                %span.islay-shop-price-point{:class => s[:mode]}
                  %span.price= s[:price]
                  %span.desc= s[:mode_desc]
            %td.number.stock
              = link_to(sku.stock_level, path(:stock_levels, :anchor => "sku-#{sku.id}"), :title => 'Adjust stock level')
            %td.meta.adjust
              - if sku.destroyable?
                = link_to('Delete', path(:delete, @product, sku), :class => 'delete')
              - else
                %span.locked{:title => 'This SKU has been ordered, so it can\'t be deleted'} Locked

    .table-footer
      .selection-controls(colspan=7)
        = position_buttons

= footer do
  = new_button('SKU', @product, :sku)
  = edit_button(@product)
  - if @product.destroyable?
    = delete_button(@product)
