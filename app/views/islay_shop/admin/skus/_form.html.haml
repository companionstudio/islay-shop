= resource_form([:admin, @product, @sku]) do |f|
  = content do
    = f.fieldset(:class => 'primary') do
      = f.input(:published, :col => 'first-inline')
      = f.input(:status, :col => 'inline', :collection => f.object.statuses, :as => 'radio_buttons')
      = f.input(:name)
      = f.input(:stock_level)
      = f.input(:asset_ids, :collection => @assets, :as => 'multi_asset', :label => 'Images and Documents')

    = f.fieldset('Purchase Limit') do
      = f.input(:purchase_limiting, :label => 'Limiting', :col => 'first-inline')
      = f.input(:purchase_limit, :label => 'Limit', :class => 'small', :col => 'inline')

    = f.fieldset('Pricing') do
      - if f.object.errors.has_key?(:price_points)
        %p.association-error
          = f.object.errors.get(:price_points).join(', ')
      %table{:cellspacing => 0, :cellpadding => 0}
        %thead
          %tr
            %th.date Dates
            %th.kind Kind
            %th.number Volume
            %th.number Price
            %th.controls Expire

        %tbody
          = f.fields_for(:price_points, @sku.price_points, {:include_id => false}) do |point|
            - if point.object.current?
              %tr
                %td
                  %span.time= point.object.valid_from
                  = point.hidden_field(:id)
                %td
                  = point.select(:mode, %w(single boxed bracketed))
                %td
                  = point.text_field(:volume, :field_class => 'number tiny')
                %td
                  = point.text_field(:display_price, :field_class => 'tiny currency', :autocomplete => 'off')
                %td
                  - unless point.object.new_record? or point.object.mode == 'single'
                    = point.check_box(:expire)
            - else
              %tr.historical
                %td
                  %span.time
                    = point.object.valid_from
                  \-
                  %span.time
                    = point.object.valid_to
                %td= point.object.mode
                %td= point.object.volume
                %td= point.object.display_price
                %td &nbsp;

    = f.fieldset('Size & Weight', :class => 'size-and-weight') do
      = f.input(:volume, :class => 'small', :label => 'Volume (ml)', :col => 'first-inline')
      = f.input(:weight, :class => 'small', :label => 'Weight (g)', :col => 'inline')
      = f.input(:size, :class => 'small', :col => 'inline')


    - f.metadata do |attrs|
      = f.fieldset('Attributes', :class => 'attributes') do
        - attrs.each do |name, opts|
          = f.metadata_input(name, opts)

    - if integrate_blog?
      = f.fieldset('Blog Entries') do
        = f.association(:blog_entries, :collection => @blog_entries, :as => 'multi_select', :label => 'Entries')

    = f.hidden_field(:product_id, :value => @product.id)

  = footer do
    = cancel_button(@product)
    = save_button
