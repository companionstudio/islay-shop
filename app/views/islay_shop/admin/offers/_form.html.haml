= resource_form(@offer) do |f|
  = record_name(@offer.name, 'table', :when_blank => 'New Offer')
  = form_errors(@offer)
  = content do
    = f.fieldset('Offer details', :class => 'primary form-tab', :id => 'offer-details') do
      .form-block
        = f.input(:name, :col => 6)
        = f.input(:description, :as => 'text')

      .form-block
        = f.input(:display_price, :label => 'Price', :autocomplete => 'off')

        .form-block-note Set the minimum and maximum quantities for this offer. This acts as a multiplier to all the items included in the offer.

        = f.input(:default_quantity, :label => 'Default quantity', :autocomplete => 'off', :hint => "A minimum of 0 means the customer will need to opt-in for this offer.")
        = f.input(:min_quantity, :label => 'Min quantity', :autocomplete => 'off', :hint => "A minimum of 0 means the customer can skip this offer.")

        = f.input(:max_quantity, :label => 'Max quantity', :autocomplete => 'off', :hint => "Clear the maximum to remove the limit on purchases.")

      .form-block
        = f.input(:open_at, :as => :date_picker, :label => 'Open date', :hint => 'When the offer will appear on the website.')
        = f.input(:close_at, :as => :date_picker, :label => 'Close date', :hint => 'When no further changes can be made to orders.')
        = f.input(:ship_at, :as => :date_picker, :label => 'Ship date', :hint => 'When shipping begins.')

      .form-block
        - f.metadata do |attrs|
          - if attrs
            - attrs.each do |name, opts|
              = f.metadata_input(name)

    = f.fieldset('Items in this offer', :class => 'form-tab', :id => 'offer-items') do

      %p Add the items you want to include in this offer and their quantities below. To remove an item from the offer, just set its quantity to 0.

      %table.islay-offer-items.editable-grid.folded
        %thead
          %tr
            %th Quantity
            %th Product & Sku
            %th Base price
        %tbody
          = f.fields_for(:offer_items) do |oif|
            %tr
              %td.quantity= oif.input(:quantity)
              %td= oif.input(:sku_id, :collection => @skus, :include_blank => 'Select SKU', :label => 'Product SKU')
              %td
                - if oif.object.sku_id
                  = oif.object.sku.single_price

    = f.fieldset('Orders', :class => 'form-tab', :id => 'offer-orders') do
      .form-block.compact
        %h2 Candidates
        %table.islay-offer-candidates.sortable
          %thead
            %tr
              %th.select= check_box_tag('table_select_all', 1, nil, :class => 'toggle')
              %th Name
              %th Email
              %th Order
          %tbody
            - if f.object.candidates.empty?
              %tr
                %td{colspan: 3} No members qualify for the offer.
            - else
              - f.object.candidates.each do |candidate|
                %tr
                  %td.select= check_box_tag('ids[]', candidate.id, nil, :class => 'toggle')
                  %td= link_to(candidate.name, path(candidate))
                  %td= candidate.email
                  %td
                    - order_offer = candidate.offer_orders.find_by(offer_id: f.object.id)
                    - if order_offer.present?
                      = link_to(order_offer.order.reference, path(order_offer.order))
                    - else
                      %span.empty -

      .form-block.compact
        %h2 Orders
        - if @offer.new_record?
          %table.islay-offer-candidates.sortable
            %thead
              %tr
                %th Status
                %th Name
                %th Total
                %th.meta Updated
            %tbody
              %tr.empty
                %td{colspan: 4} You'll need to save this offer before you can generate orders for it.

        - else
          %p= link_to('Generate orders', generate_admin_offer_path(id: @offer.id))
          %table.islay-offer-candidates.sortable
            %thead
              %tr
                %th Status
                %th Name
                %th Total
                %th.meta Updated
            %tbody
              - if f.object.orders.empty?
                %tr
                  %td{colspan: 3} No orders have been created yet.
              - else
                - f.object.orders.each do |order|
                  %tr
                    %td
                      %span.indicator= order.status
                    %td
                      = link_to(order.name, path(order), :class => 'title')
                      %span.reference.numeric= order.reference
                    %td
                      %span.numeric= order.total
                    %td.meta
                      %span.time= order.updated_at


  = footer do
    = save_button
